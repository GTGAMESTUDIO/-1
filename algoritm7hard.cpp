
## üîπ **1. –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤**  
–ê–ª–≥–æ—Ä–∏—Ç–º—ã –º–æ–∂–Ω–æ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥—Ä—É–ø–ø:  
1. **–ù–µ–º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É—é—â–∏–µ** (–Ω–µ –∏–∑–º–µ–Ω—è—é—Ç –¥–∞–Ω–Ω—ã–µ)  
2. **–ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É—é—â–∏–µ** (–∏–∑–º–µ–Ω—è—é—Ç –¥–∞–Ω–Ω—ã–µ)  
3. **–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ –±–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫**  
4. **–ß–∏—Å–ª–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏**  
5. **–ö—É—á–∞ (heap)**  
6. **–ú–∏–Ω–∏–º—É–º/–º–∞–∫—Å–∏–º—É–º**  
7. **–ü–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏**  

---

## üîπ **2. –ù–µ–º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É—é—â–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã**  
### **2.1 `std::find` ‚Äî –ø–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞**  
```cpp
std::vector<int> v = {1, 2, 3, 4, 5};
auto it = std::find(v.begin(), v.end(), 3); // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ç–µ—Ä–∞—Ç–æ—Ä –Ω–∞ 3
if (it != v.end()) std::cout << "–ù–∞–π–¥–µ–Ω: " << *it; // –ù–∞–π–¥–µ–Ω: 3
```

### **2.2 `std::count` ‚Äî –ø–æ–¥—Å—á—ë—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤**  
```cpp
int cnt = std::count(v.begin(), v.end(), 2); // cnt = 1
```

### **2.3 `std::all_of`, `any_of`, `none_of` ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π**  
```cpp
bool all_even = std::all_of(v.begin(), v.end(), [](int x) { return x % 2 == 0; }); // false
bool has_negative = std::any_of(v.begin(), v.end(), [](int x) { return x < 0; }); // false
```

### **2.4 `std::search` ‚Äî –ø–æ–∏—Å–∫ –ø–æ–¥–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏**  
```cpp
std::vector<int> sub = {3, 4};
auto it = std::search(v.begin(), v.end(), sub.begin(), sub.end()); // –∏—Ç–µ—Ä–∞—Ç–æ—Ä –Ω–∞ 3
```

---

## üîπ **3. –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É—é—â–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã**  
### **3.1 `std::copy` ‚Äî –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ**  
```cpp
std::vector<int> dest(5);
std::copy(v.begin(), v.end(), dest.begin()); // dest = {1, 2, 3, 4, 5}
```

### **3.2 `std::fill` ‚Äî –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–µ–º**  
```cpp
std::fill(v.begin(), v.end(), 0); // v = {0, 0, 0, 0, 0}
```

### **3.3 `std::replace` ‚Äî –∑–∞–º–µ–Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤**  
```cpp
std::replace(v.begin(), v.end(), 0, 42); // v = {42, 42, 42, 42, 42}
```

### **3.4 `std::remove` ‚Äî —É–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤**  
```cpp
auto new_end = std::remove(v.begin(), v.end(), 42); // "—É–¥–∞–ª—è–µ—Ç" 42, –Ω–æ —Ñ–∏–∑–∏—á–µ—Å–∫–∏ –Ω–µ —É–º–µ–Ω—å—à–∞–µ—Ç –≤–µ–∫—Ç–æ—Ä
v.erase(new_end, v.end()); // —Ç–µ–ø–µ—Ä—å v –ø—É—Å—Ç
```

### **3.5 `std::reverse` ‚Äî —Ä–∞–∑–≤–æ—Ä–æ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏**  
```cpp
std::reverse(v.begin(), v.end()); // v = {5, 4, 3, 2, 1}
```

### **3.6 `std::unique` ‚Äî —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤**  
```cpp
std::vector<int> dup = {1, 1, 2, 2, 3};
auto last = std::unique(dup.begin(), dup.end()); // dup = {1, 2, 3, ?, ?}
dup.erase(last, dup.end()); // dup = {1, 2, 3}
```

---

## üîπ **4. –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ –±–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫**  
### **4.1 `std::sort` ‚Äî —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞**  
```cpp
std::sort(v.begin(), v.end()); // –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
std::sort(v.begin(), v.end(), std::greater<int>()); // –ø–æ —É–±—ã–≤–∞–Ω–∏—é
```

### **4.2 `std::stable_sort` ‚Äî —Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞**  
–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ—Ä—è–¥–æ–∫ —Ä–∞–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.  
```cpp
std::stable_sort(v.begin(), v.end());
```

### **4.3 `std::binary_search` ‚Äî –±–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫**  
```cpp
bool found = std::binary_search(v.begin(), v.end(), 3); // true
```

### **4.4 `std::lower_bound` –∏ `std::upper_bound`**  
```cpp
auto low = std::lower_bound(v.begin(), v.end(), 3); // –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ ‚â• 3
auto up = std::upper_bound(v.begin(), v.end(), 3);  // –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ > 3
```

### **4.5 `std::merge` ‚Äî —Å–ª–∏—è–Ω–∏–µ –¥–≤—É—Ö –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Å—Å–∏–≤–æ–≤**  
```cpp
std::vector<int> v1 = {1, 3, 5};
std::vector<int> v2 = {2, 4, 6};
std::vector<int> merged(6);
std::merge(v1.begin(), v1.end(), v2.begin(), v2.end(), merged.begin()); // {1, 2, 3, 4, 5, 6}
```

---

## üîπ **5. –ß–∏—Å–ª–µ–Ω–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã**  
### **5.1 `std::accumulate` ‚Äî —Å—É–º–º–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤**  
```cpp
int sum = std::accumulate(v.begin(), v.end(), 0); // 15
```

### **5.2 `std::inner_product` ‚Äî —Å–∫–∞–ª—è—Ä–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ**  
```cpp
int dot = std::inner_product(v1.begin(), v1.end(), v2.begin(), 0); // 1*2 + 3*4 + 5*6 = 44
```

### **5.3 `std::partial_sum` ‚Äî —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å—É–º–º—ã**  
```cpp
std::vector<int> out(3);
std::partial_sum(v1.begin(), v1.end(), out.begin()); // out = {1, 4, 9}
```

### **5.4 `std::adjacent_difference` ‚Äî —Ä–∞–∑–Ω–æ—Å—Ç—å —Å–æ—Å–µ–¥–µ–π**  
```cpp
std::adjacent_difference(v1.begin(), v1.end(), out.begin()); // out = {1, 2, 2}
```

---

## üîπ **6. –†–∞–±–æ—Ç–∞ —Å –∫—É—á–µ–π (heap)**  
### **6.1 `std::make_heap` ‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ –∫—É—á–∏**  
```cpp
std::make_heap(v.begin(), v.end()); // –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –≤–µ–∫—Ç–æ—Ä –≤ –∫—É—á—É
```

### **6.2 `std::push_heap` –∏ `std::pop_heap`**  
```cpp
v.push_back(6);
std::push_heap(v.begin(), v.end()); // –¥–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –≤ –∫—É—á—É

std::pop_heap(v.begin(), v.end()); // –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç –º–∞–∫—Å–∏–º—É–º –≤ –∫–æ–Ω–µ—Ü
v.pop_back(); // —É–¥–∞–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
```

---

## üîπ **7. –ú–∏–Ω–∏–º—É–º –∏ –º–∞–∫—Å–∏–º—É–º**  
### **7.1 `std::min_element` –∏ `std::max_element`**  
```cpp
auto min_it = std::min_element(v.begin(), v.end()); // –∏—Ç–µ—Ä–∞—Ç–æ—Ä –Ω–∞ –º–∏–Ω–∏–º—É–º
auto max_it = std::max_element(v.begin(), v.end()); // –∏—Ç–µ—Ä–∞—Ç–æ—Ä –Ω–∞ –º–∞–∫—Å–∏–º—É–º
```

### **7.2 `std::minmax_element`**  
```cpp
auto [min_it, max_it] = std::minmax_element(v.begin(), v.end());
```

---

## üîπ **8. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏**  
### **8.1 `std::generate` ‚Äî –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏**  
```cpp
std::vector<int> nums(5);
std::generate(nums.begin(), nums.end(), []() { return rand() % 10; }); // —Å–ª—É—á–∞–π–Ω—ã–µ —á–∏—Å–ª–∞
```

### **8.2 `std::next_permutation` ‚Äî —Å–ª–µ–¥—É—é—â–∞—è –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞**  
```cpp
std::string s = "abc";
do {
    std::cout << s << " "; // abc acb bac bca cab cba
} while (std::next_permutation(s.begin(), s.end()));
```

---

## üîπ **9. –ü–æ–ª–µ–∑–Ω—ã–µ –ª–∞–π—Ñ—Ö–∞–∫–∏**  
### **9.1 –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ—Å–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏**  
```cpp
std::sort(v.begin(), v.end());
v.erase(std::unique(v.begin(), v.end()), v.end());
```

### **9.2 –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å**  
```cpp
bool is_sorted = std::is_sorted(v.begin(), v.end());
```

### **9.3 –ü–æ–∏—Å–∫ –ø–µ—Ä–≤–æ–≥–æ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏—è**  
```cpp
auto mismatch_pair = std::mismatch(v1.begin(), v1.end(), v2.begin());
```

---

## üîπ **10. –ò—Ç–æ–≥**  
- `<algorithm>` —Å–æ–¥–µ—Ä–∂–∏—Ç **–±–æ–ª–µ–µ 100 –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤** –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏.  
- –û—Å–Ω–æ–≤–Ω—ã–µ –≥—Ä—É–ø–ø—ã: **–ø–æ–∏—Å–∫, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞, –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è, —á–∏—Å–ª–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏**.  
- –ß–∞—â–µ –≤—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è:  
  - `std::sort`, `std::find`, `std::copy`, `std::accumulate`, `std::unique`.  
- **–õ—è–º–±–¥–∞-—Ñ—É–Ω–∫—Ü–∏–∏** –¥–µ–ª–∞—é—Ç –∞–ª–≥–æ—Ä–∏—Ç–º—ã –≥–∏–±–∫–∏–º–∏.  

–ï—Å–ª–∏ –æ—Å–≤–æ–∏—à—å `<algorithm>`, —Å–º–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å –∫–æ–¥ **–∫–æ—Ä–æ—á–µ, –±—ã—Å—Ç—Ä–µ–µ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ**! üöÄ
